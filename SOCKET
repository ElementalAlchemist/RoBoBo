RoBoBo-IRC-BoBo
Creating Socket Modules Help File
=======================
Table of Contents

1. Current API
2. Specifics of Implementation
3. Functions to Define
4. Variables Provided

=======================
1. CURRENT API

The current API version is 2.0.0.

unsigned int SocketClass::apiVersion {
	return 2000;
}

Module-breaking changes to the API are avoided starting with the release
candidate.  The API version in use as of 2.0.0RC1 was 2.0.0.

=======================
2. SPECIFICS OF IMPLEMENTATION

The Socket modules serve as functions that wrap a set of socket functions in an
abstract manner, so that protocol modules can obtain data easily without having
to worry about the connection details (plaintext vs. SSL connections, etc.).
As such, socket modules do not have functions like regular modules or protocol
modules do to access data in the bot core or other modules; they only provide
functions to the protocol module so that it can communicate with the outside
world.

The necessary data for your socket module is in sockinclude.h.  Including this
file allows you to extend the class necessary to make your class usable by the
bot and automatically includes system socket libraries for you.

Once you include sockinclude.h, you'll need to create a class that extends the
Socket class.

class SocketClass : public Socket {
	// Look! A class!
};

You'll also need to define a function that allows the bot to load your file.
This function is provided by a macro in the bot core for ease of use.  This
line must be the last one in your source file.

SOCKET_SPAWN(SocketClass)

Remember to change SocketClass to the name of the class you created.

The use of a constructor is optional.  Nothing is passed to the constructor,
but there is no reason you can't use it to set things up beforehand if you must
do so.  If you do define a constructor, you must also call the Socket()
constructor which does a small amount of its own setting things up, including
creating the socket.  Sockets are set up to be nonblocking by default; you may
change this to blocking if your use requires it.

There is a pure virtual function, apiVersion(), which must return an integer
corresponding to the version of the bot the module complies with (see section 1
above).

=======================
3. FUNCTIONS TO DEFINE

The Socket class defines a few functions that are necessary for proper
operation.

bool bindSocket(std::string address);
	This function binds the socket to a certain local address.  It returns true
		if the bind was successful and false otherwise.
	address: The address to bind the socket to

void connectServer(std::string address, unsigned short port);
	This function initiates the connection to the server.  If successful, it
		must set connected to true (see section 4 below).
	address: The address of the server to connect to
	port: The port to connect to

bool sendData(std::string message);
	This function sends the message to the server.  Messages sent into this
		function will not have newlines and must have \r\n added to the
		message.  It returns true if the send was successful and false
		otherwise.  A return value of false does not necessarily indicate a
		disconnection from the server.
	message: The line to send to the server

std::string receive();
	This function returns data received from the server.  Only one line may be
		returned in one function call; the socket module must grab and return
		the next line in the next call to receive().  If the connection breaks,
		an empty string may be returned.  When an empty string is returned,
		protocol modules should be able to assume that the connection is
		already closed and make the appropriate adjustments.

void closeConnection();
	This function closes the connection to the server.  When the connection is
		closed, the connection variable must be set to false (see section 4
		below).

=======================
4. VARIABLES PROVIDED

The Socket class also defines a few variables for your use.

int socketfd;
	This variable holds the socketfd of the socket created for this class.

sockaddr_in socketAddr;
	This variable is the sockaddr_in struct to be used with connections.

bool connected;
	This variable is checked by the bot core to determine whether the bot is
		still connected to this server.