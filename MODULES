RoBoBo-IRC-BoBo
Creating Modules Help File
=======================
Table of Contents

1. Current API
2. Specifics of Implementation
3. Communicating with a Server
- 3.1. Receiving Data from a Server
- 3.2. Receiving Data Being Sent to a Server
- 3.3. Other Hooks
- 3.4. Sending Data to a Server
4. Helpful Variables and Functions
5. Interacting With Other Modules

=======================
1. CURRENT API

The current API version is 1.1.0.

int ModuleClass::botAPIversion() {
	return 1100;
}

Module-breaking changes to the API are avoided starting with the release
candidate.  The API version in use as of 1.1.0RC1 was 1.1.0.

=======================
2. SPECIFICS OF IMPLEMENTATION

In order to interface with the bot, you will need to define a few things.

First, you will need to make a C++ file which includes some data from the bot.
This file should be placed in the src/modules/ directory.  You'll need to
include the bot information as such:

#include "modinclude.h"

This allows your class to extend the Module class and access other necessary
classes.

Second, you will need functions allowing the bot to load your module.  This is
internally known as "spawning," mostly because "spawn" is such a cool word.  In
order for the bot to load your module, you must define a way to load your
module.  This is done most simply as such:

extern "C" Module* spawn() {
	return new ModName;
}

In this snippet, the only thing that should change is the returned class in the
spawn() function, which must be changed from mod_name to the name of your
module class.  This must be placed after your class definition.  If you think
you will forget about it, write it first, and then just define the class above
it.

Now that you've defined those, you are ready to make your class!  Your class
must extend the Module class.

class ModName : public Module {
// Look!  A module!
};

If you wish you may write a constructor for your modules to initialize class
variables.  No parameters are passed to the constructor, and, as such, there is
not access to bot functions in the constructor.  Use onLoadComplete() instead
(see below, section 3.3), which the bot calls once your module has been loaded
(or if your module is loaded at startup, after all startup modules have been
loaded).

Finally, the Module class contains a pure virtual function, botAPIversion().
This function must return an integer corresponding to the version of the bot
API with which your module complies.  Information about the current API version
is listed in section 1, above.

From here you have the skeleton of your module.  The rest of this document
outlines information you may want to know such as how to receive and be able to
parse data from IRC servers, and how to send data to IRC servers.

=======================
3. COMMUNICATING WITH A SERVER

As a module for an IRC bot, you can expect to be able to communicate with the
servers the bot is connected to.  The subsections that follow describe how to
catch received and sent data so that you can react to them as well as how to
send messages from your module.

=======================
3.1. RECEIVING DATA FROM A SERVER

One direction of communication is receiving data.  This is provided through
what the bot calls "hooks."  In order to use hooks you must simply define the
functions corresponding to the hooks you need, which are declared as virtual in
the base Module class.

void onChannelMsg(std::string server, std::string channel, char target, std::string nick, std::string message);
	This function is called whenever a channel message is received by the bot.
	server: the server from which the message was received
	channel: the channel to which the message was sent
	target: the target character to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the target character is '0' (the number zero)
	nick: the nick of the user who sent the message
	message: the message sent

void onUserMsg(std::string server, std::string nick, std::string message);
	This function is called whenever a user message is received by the bot.
	server: the server from which the message was received
	nick: the nick of the user who sent the message
	message: the message sent

void onChannelNotice(std::string server, std::string channel, char target, std::string nick, std::string message);
	This function is called whenever a channel notice is received by the bot.
	server: the server from which the notice was received
	channel: the channel to which the notice was sent
	target: the target character to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the target character is '0' (the number zero)
	nick: the nick of the user who sent the notice
	message: the notice sent

void onUserNotice(std::string server, std::string nick, std::string message);
	This function is called whenever a user notice is received by the bot.
	server: the server from which the notice was received
	nick: the nick of the user who sent the notice
	message: the notice sent

void onChannelAction(std::string server, std::string channel, char target, std::string nick, std::string message);
	This function is called whenever a channel action is received by the bot.
	server: the server from which the action was received
	channel: the channel to which the action was sent
	target: the target character to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the target character is '0' (the number zero)
	nick: the nick of the user who acted
	message: the action (e.g. if the user sent /me stabs and the action was * ElementalAlchemist stabs, the message
		would simply be "stabs")

void onUserAction(std::string server, std::string nick, std::string message);
	This function is called whenever a user action is received by the bot.
	server: the server from which the action was received
	nick: the nick of the user who acted
	message: the action (e.g. if the user sent /me stabs and the action was * ElementalAlchemist stabs, the message
		would simply be "stabs")

void onChannelCTCP(std::string server, std::string channel, char target, std::string nick, std::string message);
	This function is called whenever a channel CTCP is received by the bot, except for ACTION (see onChannelAction).
	server: the server from which the CTCP was received
	channel: the channel to which the CTCP was sent
	target: the target character to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the target character is '0' (the number zero)
	nick: the nick of the user who sent the CTCP
	message: the CTCP (the first word is the CTCP type, and the rest are the parameters)

void onUserCTCP(std::string server, std::string nick, std::string message);
	This function is called whenever a user CTCP is received by the bot, except for ACTION (see onUserAction).
	server: the server from which the CTCP was received
	nick: the nick of the user who sent the CTCP
	message: the CTCP (the first word is the CTCP type, and the rest are the parameters)

void onChannelCTCPReply(std::string server, std::string channel, char target, std::string nick, std::string message);
	This function is called whenever a channel CTCP reply is received by the bot.
	server: the server from which the CTCP reply was received
	channel: the channel to which the CTCP reply was sent
	target: the target character to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the target character is '0' (the number zero)
	nick: the nick of the user who sent the CTCP reply
	message: the CTCP reply (the first word is the CTCP type, and the rest are the parameters)

void onUserCTCPReply(std::string server, std::string nick, std::string message);
	This function is called whenever a user CTCP reply is received by the bot.
	server: the server from which the CTCP reply is received
	nick: the nick fo the user who sent the CTCP reply
	message: the CTCP reply (the first word is the CTCP type, and the rest are the parameters)

void onChannelJoinPre(std::string server, std::string channel, std::string hostmask);
	This function is called whenever a user (either the bot or someone else) joins a channel.
		This function is called before any processing occurs in the core (i.e. a User is created for the Channel).
	server: the server from which the JOIN notice is received
	channel: the channel that the user joined
	hostmask: the hostmask (nick!user@host) of the user who joined the channel

void onChannelJoinPost(std::string server, std::string channel, std::string hostmask);
	This function is called whenever a user (either the bot or someone else) joins a channel.
		This function is called after any processing occurs in the core.
	server: the server from which the JOIN notice is received
	channel: the channel that the user joined
	hostmask: the hostmask (nick!user@host) of the user who joined the channel

void onChannelPartPre(std::string server, std::string channel, std::string hostmask, std::string reason);
	This function is called whenever a user (either the bot or someone else) parts a channel.
		This function is called before any processing occurs in the core.
	server: the server from which the PART notice is received
	channel: the channel from which the user parted
	hostmask: the hostmask (nick!user@host) of the user who parted the channel
	reason: the reason provided in the part message (or an empty string for no reason)

void onChannelPartPost(std::string server, std::string channel, std::string hostmask, std::string reason);
	This function is called whenever a user (either the bot or someone else) parts a channel.
		This function is called after any processing occurs in the core.
	server: the server from which the PART notice is received
	channel: the channel from which the user parted
	hostmask: the hostmask (nick!user@host) of the user who parted the channel
	reason: the reason provided in the part message (or an empty string for no reason)

void onUserQuitPre(std::string server, std::string hostmask, std::string reason);
	This function is called whenever a user (either the bot or someone else) quits from the server.
		This function is called before any processing occurs in the core.
		For detecting bot disconnections, it is recommended you use onQuit (see below, section 3.3).
	server: the server from which the QUIT notice is received
	hostmask: the hostmask (nick!user@host) of the user who quit the server
	reason: the reason provided in the quit message

void onUserQuitPost(std::string server, std::string hostmask, std::string reason);
	This function is called whenever a user (either the bot or someone else) quits from the server.
		This function is called after any processing occurs in the core.
		For detecting bot disconnections, it is recomended you use onQuit (see below, section 3.3).
	server: the server from which the QUIT notice is received
	hostmask: the hostmask (nick!user@host) of the user who quit the server
	reason: the reason provided in the quit message

void onNickChangePre(std::string server, std::string oldNick, std::string newNick);
	This function is called whenever a user (either the bot or someone else) changes nicks.
		This function is called before any processing occurs in the core.
	server: the server from which the NICK notice is received
	oldNick: the old nick of the user
	newNick: the new nick of the user

void onNickChangePost(std::string server, std::string oldNick, std::string newNick);
	This function is called whenever a user (either the bot or someone else) changes nicks.
		This function is called after any processing occurs in the core.
	server: the server from which the NICK notice is received
	oldNick: the old nick of the user
	newNick: the new nick of the user

void onChannelKickPre(std::string server, std::string channel, std::string kicker, std::string kickee, std::string reason);
	This function is called whenever a user (either the bot or someone else) kicks another user (either the bot
		or someone else) from a channel.
		This function is called before any processing occurs in the core.
	server: the server from which the KICK notice is received
	channel: the channel from which the user was kicked
	kicker: the nick of the user who kicked
	kickee: the nick of the user who got kicked
	reason: the kick reason provided

void onChannelKickPost(std::string server, std::string channel, std::string kicker, std::string kickee, std::string reason);
	This function is called whenever a user (either the bot or someone else) kicks another user (either the bot
		or someone else) from a channel.
		This function is called after any processing occurs in the core.
	server: the server from which the KICK notice is received
	channel: the channel from which the user was kicked
	kicker: the nick of the user who kicked
	kickee: the nick of the user who got kicked
	reason: the kick reason provided

void onChannelModePre(std::string server, std::string channel, std::string setter, char mode, bool add, std::string param);
	This function is called whenever a mode is changed on a channel.
		This function is called before any processing occurs in the core.
	server: the server from which the MODE notice is received
	channel: the channel in which the mode was changed
	setter: the nick of the user who changed the mode
	mode: the mode letter
	add: true if the mode was added to the channel, and false if it was removed
	param: the mode's parameter (an empty string if the mode does not take a parameter)

void onChannelModePost(std::string server, std::string channel, std::string setter, char mode, bool add, std::string param);
	This function is called whenever a mode is changed on a channel.
		This function is called after any processing occurs in the core.
	server: the server from which the MODE notice is received
	channel: the channel in which the mode was changed
	setter: the nick of the user who changed the mode
	mode: the mode letter
	add: true if the mode was added to the channel, and false if it was removed
	param: the mode's parameter (an empty string if the mode does not take a parameter)

void onNumeric(std::string server, std::string numeric, std::vector<std::string> parsedLine);
	This function is called whenever a numeric is received by the bot.
	server: the server from which the numeric was received
	numeric: the numeric that was received
	parsedLine: an IRC parsed line containing the contents of the entire line

void onOtherData(std::string server, std::vector<std::string> parsedLine);
	This function is called whenever data is received that does not call any of the other functions.
	server: the server from which the data was received
	parsedLine: an IRC parsed line containing the contents of the entire line

=======================
3.2 RECEIVING DATA BEING SENT TO A SERVER

Some hooks are defined to catch outgoing data, as well.  These hooks will be
called when a matching line is sent, even if the hook being called belongs to
the module that sent the line.  Outgoing hooks are not defined for data that is
returned when successful (i.e. MODE, etc.).

std::string onOutChannelMessage(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel message is about to be sent from the bot to the server.
	server: the server to which the message is to be sent
	target: the channel to which the message is to be sent
	status: the status char to which the message is to be sent (e.g. if the message is to be sent to @#channel)
		if the message is sent to everyone in the channel, the status character is '0' (the number zero)
	message: the message to be sent
	std::string: return the new message to be sent.  If you wish to not change the message, return the original
		message.  If you wish to cancel sending this message, return an empty string.

void onSendChannelMessage(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel message is sent from the bot to the server.
		It is called immediately after the message is sent.
	server: the server to which the message was sent
	target: the channel to which the message was sent
	status: the status char to which the message was sent (e.g. if the message was sent to @#channel)
		if the message was sent to everyone in the channel, the status character is '0' (the number zero)
	message: the message that was sent

std::string onOutUserMessage(std::string server, std::string target, std::string message);
	This function is called whenever a user message is about to be sent from the bot to the server.
	server: the server to which the message is to be sent
	target: the nick of the user to which the message is to be sent
	message: the message to be sent
	std::string: return the new message to be sent.  If you wish to not change the message, return the original
		message.  If you wish to cancel sending this message, return an empty string.

void onSendUserMessage(std::string server, std::string target, std::string message);
	This function is called whenever a user message is sent from the bot to the server.
		It is called immediately after the message is sent.
	server: the server to which the message was sent
	target: the nick of the user to whom the message was sent
	message: the message that was sent

std::string onOutChannelNotice(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel notice is about to be sent from the bot to the server.
	server: the server to which the message is to be sent
	target: the channel to which the message is to be sent
	status: the status char to which the message is to be sent (e.g. if the message was sent to @#channel)
		if the notice is sent to everyone in the channel, the status character is '0' (the number zero)
	message: the message that is to be sent
	std::string: return the new message to be sent.  If you wish to not change the message, return the original
		message.  If you wish to cancel sending this message, return an empty string.

void onSendChannelNotice(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel notice is sent from the bot to the server.
		It is called immediately after the message is sent.
	server: the server to which the message was sent
	target: the channel to which the message was sent
	status: the status char to which the message was sent (e.g. if the message was sent to @#channel)
		if the notice was sent to everyone in the channel, the status character is '0' (the number zero)
	message: the message that was sent

std::string onOutUserNotice(std::string server, std::string target, std::string message);
	This function is called whenever a user notice is about to be sent from the bot to the server.
	server: the server to which the message is to be sent
	target: the nick of the user to which the message is to be sent
	message: the message to be sent
	std::string: return the new message to be sent.  If you wish to not change the message, return the original
		message.  If you wish to cancel sending this message, return an empty string.

void onSendUserNotice(std::string server, std::string target, std::string message);
	This function is called whenever a user notice is sent from the bot to the server.
		It is called immediately after the message is sent
	server: the server to which the message was sent
	target: the nick of the user to whom the message was sent
	message: the message that was sent

std::string onOutChannelAction(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel action is about to be sent from the bot to the server.
	server: the server to which the action is to be sent
	target: the channel to which the action is to be sent
	status: the status char to which the action is to be sent (e.g. if the message was sent to @#channel)
		if the action is sent to everyone in the channel, the status character is '0' (the number zero)
	message: the action to be sent (e.g. if sending ^AACTION does stuff^A, the message would be "does stuff")
	std::string: return the new action to be sent in the same format as the message.  If you wish to not change
		the action, return the original message.  If you wish to cancel sending this action, return an empty string.

void onSendChannelAction(std::string server, std::string target, char status, std::string message);
	This function is called whenever a channel action is sent from the bot to the server.
		It is called immediately after the action is sent
	server: the server to which the action was sent
	target: the channel to which the action was sent
	status: the status char to which the action was sent (e.g. if the action was sent to @#channel)
		if the action is sent to everyone in the channel, the status character is '0' (the number zero)
	message: the action to be sent (e.g. if sending ^AACTION does stuff^A, the message would be "does stuff")

std::string onOutUserAction(std::string server, std::string target, std::string message);
	This function is called whenever a user action is about to be sent from the bot to the server.
	server: the server to which the action is to be sent
	target: the user to which the action is to be sent
	message: the action to be sent (e.g. if sending ^AACTION does stuff^A, the message would be "does stuff")
	std::string: return the new action to be sent in the same format as the message.  If you wish to not change
		the action, return the original message.  If you wish to cancel sending this action, return an empty string.

void onSendUserAction(std::string server, std::string target, std::string message);
	This function is called whenever a user action is sent from the bot to the server.
		It is called immediately after the action is sent.
	server: the server to which the action was sent
	target: the user to whom the action was sent
	message: the action that was sent (e.g. if ^AACTION does stuff^A was sent, the message would be "does stuff")

std::string onOutChannelCTCP(std::string server, std::string target, char status, std::string message);
	This function is called when a channel CTCP is about to be sent from the bot to the server.
	server: the server to which the CTCP is to be sent
	target: the channel to which the CTCP is to be sent
	status: the status char to which the CTCP is to be sent (e.g. if the CTCP was sent to @#channel)
		if the CTCP is to be sent to everyone in the channel, the status character is '0' (the number zero)
	message: the CTCP request
	std::string: return the new CTCP request to send.  If you wish to not change the CTCP, return the original
		message.  If you wish to cancel sending this CTCP, return an empty string.

void onSendChannelCTCP(std::string server, std::string target, char status, std::string message);
	This function is called when a channel CTCP is sent from the bot to the server.
		It is called immediately after the CTCP is sent.
	server: the server to which the CTCP was sent
	target: the channel to which the CTCP was sent
	status: the status char to which the CTCP was sent (e.g. if the CTCP was sent to @#channel)
	message: the CTCP request

std::string onOutUserCTCP(std::string server, std::string target, std::string message);
	This function is called when a user CTCP is about to be sent from the bot to the server.
	server: the server to which the CTCP is to be sent
	target: the nick of the user to whom the CTCP is to be sent
	message: the CTCP request
	std::string: return the new CTCP request to send.  If you wish to not change the CTCP, return the original
		message.  If you wish to cancel sending this CTCP, return an empty string.

void onSendUserCTCP(std::string server, std::string target, std::string message);
	This function is called when a user CTCP is sent from the bot to the server.
		It is called immediately after the CTCP is sent.
	server: the server to which the CTCP was sent
	target: the nick of the user to whom the CTCP was sent
	message: the CTCP request

std::string onOutChannelCTCPReply(std::string server, std::string target, char status, std::string message);
	This function is called when a channel CTCP reply is about to be sent from the bot to the server.
	server: the server to which the CTCP reply is to be sent
	target: the channel to which the CTCP reply is to be sent
	status: the status char to which the CTCP reply is to be sent (e.g. if the CTCP reply is being sent to @#channel)
		if the CTCP reply is being sent to everyone in the channel, the status character is '0' (the number zero)
	message: the CTCP reply
	std::string: return the new CTCP reply to send.  If you wish to not change the CTCP reply, return the original
		message.  If you wish to cancel sending this CTCP reply, return an empty string.

void onSendChannelCTCPReply(std::string server, std::string target, char status, std::string message);
	This function is called when a channel CTCP reply is sent from the bot to the server.
		It is called immediately after the reply is sent.
	server: the server to which the CTCP reply was sent
	target: the channel to which the CTCP reply was sent
	status: the status char to which the CTCP reply was sent (e.g. if the CTCP reply was sent to @#channel)
		if the CTCP reply was sent to everyone in the channel, the status character is '0' (the number zero)
	message: the CTCP reply

std::string onOutUserCTCPReply(std::string server, std::string target, std::string message);
	This function is called when a user CTCP reply is about to be sent from the bot to the server.
	server: the server to which the CTCP reply is to be sent
	target: the nick of the user to whom the CTCP reply is to be sent
	message: the CTCP reply
	std::string: return the new CTCP reply to send.  If you wish to not change the CTCP reply, return the original
		message.  If you wish to cancel sending this CTCP reply, return an empty string.

void onSendUserCTCPReply(std::string server, std::string target, std::string message);
	This function is called when a user CTCP reply is sent from the bot to the server.
		It is called immediately after the CTCP reply is sent.
	server: the server to which the CTCP reply was sent
	target: the nick of the user to whom the CTCP reply was sent
	message: the CTCP reply

=======================
3.3. OTHER HOOKS

There are some other hooks, too.  When they are called depends on the hook.

bool onLoadComplete();
	This function is called when your module is loaded or, if the module is loaded during startup,
	after all the startup modules have been loaded.  You should return true unless during your
	checking in this function you determine that something is preventing your module from loading
	properly.  Note that returning false does not automatically unload your module.

void onRehash();
	This function is called whenever the bot is rehashed.  A new copy of the configuration data
	is loaded into each module before this function is called.

void onModuleChange();
	This function is called whenever a different module is loaded or unloaded.

void onPreConnect(std::string server);
	This function is called immediately before a bot connects to a server.

void onConnect(std::string server);
	This function is called when the bot connects to a server, immediately before the bot sends
	the registration information.

void onQuit (std::string server);
	This function is called whenever the bot quits or is removed from a server.

std::string description();
	This function allows you to provide a short description of your module.

std::vector<std::string> abilities();
	This function allows you to provide a list of abilities that your module provides (for example,
	the included admin module provides "BOT_ADMIN").  You can name your ability whatever you want, so
	long as it isn't the same as the name of another ability which does something different.  (Name
	conflicts may affect modules which use that ability.)

std::vector<std::string> supports();
	This function allows you to provide a list of abilities that your module uses/supports.  These may
	be required or optional dependencies.  This list typically helps modules providing each ability your
	module supports find your module.  This may or may not be required depending on the details of the
	ability.

=======================
3.4. SENDING DATA TO A SERVER

Some functions are provided to you free of charge in the Module class allowing
you to easily perform certain actions.

void sendPrivMsg(std::string server, std::string target, std::string message);
	This function will send a message.
		server: The server the message is to be sent to
		target: The recipient of the message.  Either a nick or a channel.
		message: The message you wish to send.
void sendNotice(std::string server, std::string target, std::string message);
	This function will send a notice.
		server: The server the message is to be sent to
		target: The recipient of the notice.  Either a nick or a channel.
		message: The message you wish to send.
void sendCTCP(std::string server, std::string target, std::string type, std::string params = "");
	This function will send a CTCP request.
		server: The server the CTCP is to be sent to.
		target: The recipient of the CTCP request.
		type: The type of CTCP you are sending (PING, VERSION, etc.)
		params: Optional. Any data that should be sent with the CTCP request.
void sendCTCPReply(std::string server, std::string target, std::string type, std::string data = "");
	This function will send a CTCP reply.
		server: The server the reply is to be sent to.
		target: The recipient of the CTCP reply.
		type: The type of reply you are sending (PING, VERSION, etc.)
		params: Optional. Any data that should be sent with the CTCP reply.
void joinChannel(std::string server, std::string channel, std::string key = "");
	This function will make the bot join a channel.
		server: The server of the channel the bot should be joining
		channel: The channel to join
		key: Optional. The key of the channel the bot is to join
void partChannel(std::string server, std::string channel, std::string reason);
	This function will make the bot part a channel.
		server: The server of the channel the bot should part
		channel: The channel the bot should part
		reason: The part message
void kickChannelUser(std::string server, std::string channel, std::string nick, std::string reason);
	This function will make the bot kick someone in a channel.
		server: The server on which the user you wish to kick is
		channel: The channel to kick a user from
		nick: The nick to kick from the channel
		reason: The kick reason
void setMode(std::string server, std::string channel, char mode, bool add, std::string param = "");
	This function will make the bot set a mode on a channel.
		server: The server the channel is on
		channel: The channel the mode is to be set on
		mode: The mode character you wish to setMode
		add: TRUE if you wish to set the mode, FALSE if you wish to remove it
		param: Optional. The parameter for the mode
void sendOtherCommand(std::string server, std::string command, std::string data);
	This function allows you to send any command not specified by another function.
		server: The server to send the command to
		command: The command itself
		data: Any parameters for the command.  The command and data are separated by a space.
bool connectServer(std::string server);
	This function allows you to connect the bot to a server.  It returns true if it could connect, or false if it couldn't.
		server: The server to connect to
void quitServer(std::string server, std::string reason);
	This function makes the bot quit a server.
		server: The server to quit
		reason: The quit reason to give

=======================
4. HELPFUL VARIABLES AND FUNCTIONS

The Module class contains some functions that make it possible to code many
modules and other functions that are just helpful.

std::string moduleName;
This variable contains the name for the module as known internally by the bot.
It's also the bot's filename.

unsigned short debugLevel;
The debug level the bot was started with.  This allows you to have your module
output debug info based on the debug level the bot was started with.

std::tr1::unordered_map<std::string, std::string> config;
This variable contains all of the variables that correspond to the module and
the values that the variables have as defined in the configuration file.  The
map key is the specified variable, and the map value is the variable's
configured definition.

bool loadModule(std::string modName);
This function causes the bot to load the module with the filename modName and
call onModuleChange() for all loaded modules.

void unloadModule(std::string modName);
This function causes the bot to unload the module with the filename modName
and call onModuleChange() for all loaded modules.

void rehashBot();
This function causes the bot to reload the configuration file and call
onRehash() for all loaded modules.

unsigned int getBotVersion();
This function returns the version number of the bot core, in this format:
1001 = 1.0.1
1010 = 1.0.10
1102 = 1.1.2

std::list<std::string> getServers()
This function returns a list of valid server names.  It gives the names of all
connected servers.

std::tr1::unordered_map<std::string, Module*> getModules()
This function returns currently loaded modules.  This is useful if you want
your module to interact with another module.

std::multimap<std::string, std::string> getModAbilities();
This function returns a list of module abilities.  This multimap works as
follows:
first = provided ability
second = module name

std::tr1::unordered_map<std::string, std::vector<std::string> > getModSupports();
This function returns a list of abilities that modules support.  This unordered_map
works as follows:
first = ability
second = list of modules that support it

std::vector<std::string> splitHostmask(std::string hostmask)
This function takes a hostmask.  The hostmask can be either in the form of a
normal nick!user@host hostmask or taken directly from a parsedLine[0] (or any
other variable that may contain a line split up in that fashion).
It returns a vector with the nick in position 0, the ident in position 1, and
the hostname in position 2.

std::vector<std::string> splitBySpace(std::string line)
This function takes any line, and it splits it into pieces using a space as a
delimiter.  Each word gets one position in the vector in the order in which the
word was found.

std::tr1::unordered_map<std::string, std::string> getServerData(std::string server);
This function returns the conf data held by the server class.  Any part of the
configuration may be updated by the Server class during normal use (such as
nick).

std::vector<std::vector<char> > getServerChanModes(std::string server);
This function returns all valid channel modes for the server as specified in
005 CHANMODES.  The outer vector has four elements, split by 005 CHANMODES's
commas:
0 => list modes
1 => modes that need a parameter to both set and unset (like +k)
2 => modes that take a parameter but do not require it to unset
3 => modes with no parameters
The inner vectors are as long as necessary to hold all the modes of that type.

std::vector<std::pair<char, char> > getServerPrefixes(std::string server);
This function returns all valid prefix/status modes for the server as specified
in 005 PREFIX.  Each entry holds two characters:
first => mode char
second => status prefix char
The modes are in order from 0 (highest precedence) to .size()-1 (lowest precedence).

std::list<std::string> getChannels(std::string server);
This function returns a list of the names of all the channels the bot is in on
the specified server.

std::string getChannelTopic(std::string server, std::string channel);
This function returns the topic of the specified channel on the specified
server, if the bot is in it.

std::list<std::string> getChannelUsers(std::string server, std::string channel);
This function returns a list of all users in the specified channel on the
specified server, if the bot is in it.

std::string getUserIdent(std::string server, std::string channel, std::string user);
This function returns the ident of the specified user.  Due to how the bot stores
user data, you'll need to supply a channel that both the bot and the user are in.

std::string getUserHost(std::string server, std::string channel, std::string user);
This function returns the host of the specified user.  Due to how the bot stores
user data, you'll need to specify a channel that both the bot and the user are in.

std::pair<char, char> getUserStatus(std::string server, std::string channel, std::string user);
This function returns the status of the specified user in the specified channel
on the specified server, if both the bot and the user are in that channel.  The
returned status is in this form:
first => mode char
second => status prefix char

=======================
5. INTERACTING WITH OTHER MODULES

Interacting with modules using functions that are not part of the Module class
requires the use of a custom class in a header file in the src/modules/ directory.
A module must extend the class in the header file in order to provide those
functions to other modules.  A module that takes advantage of another module's
functionality must have the header file present to compile, regardless of
whether the module that provides the functions your module is using is present
when the bot is run.

If your module relies on the presence of another module, you should check for
the other module in both onLoadComplete() AND onModuleChange().